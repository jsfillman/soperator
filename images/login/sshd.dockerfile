ARG BASE_IMAGE=ubuntu:jammy

FROM $BASE_IMAGE AS login_sshd

ARG SLURM_VERSION=24.05.5
ARG CUDA_VERSION=12.4.1

ARG DEBIAN_FRONTEND=noninteractive

# TODO: Install only those dependencies that are required for running sshd + useful utilities
# Install dependencies
RUN apt-get update && \
    apt -y install \
        wget \
        curl \
        git \
        build-essential \
        bc \
        python3  \
        autoconf \
        pkg-config \
        libssl-dev \
        libpam0g-dev \
        libtool \
        libjansson-dev \
        libjson-c-dev \
        libmunge-dev \
        libhwloc-dev \
        liblz4-dev \
        flex \
        libevent-dev \
        jq \
        squashfs-tools \
        zstd \
        software-properties-common \
        iputils-ping \
        dnsutils \
        telnet \
        strace \
        vim \
        tree \
        lsof

# Install OpenSSH server
RUN apt install -y openssh-server

# Create root .ssh directory
RUN mkdir -m 700 -p /root/.ssh

# Remove autogenerated sshd server keys
RUN rm -rf /etc/ssh/ssh_host*key*

# Create dummy library for replacing GPU-specific libraries with it
RUN mkdir -p /usr/src/dummy && \
    cd /usr/src/dummy && \
    echo "int main() { return 0; }" > dummy.c && \
    gcc -shared -o libdummy.so dummy.c && \
    cp libdummy.so /lib/x86_64-linux-gnu/

# TODO: Install only necessary packages
# Download and install Slurm packages
RUN for pkg in slurm-smd-client slurm-smd-dev slurm-smd-libnss-slurm slurm-smd-libslurm-perl slurm-smd; do \
        wget -q -P /tmp https://github.com/jsfillman/slurm-deb-packages/releases/download/$CUDA_VERSION-$(grep 'VERSION_CODENAME' /etc/os-release | cut -d= -f2)-slurm$SLURM_VERSION/${pkg}_$SLURM_VERSION-1_arm64.deb && \
        echo "${pkg}_$SLURM_VERSION-1_arm64.deb successfully downloaded" || \
        { echo "Failed to download ${pkg}_$SLURM_VERSION-1_arm64.deb"; exit 1; }; \
    done

RUN apt install -y /tmp/*.deb && rm -rf /tmp/*.deb

# Install slurm —Åhroot plugin
COPY common/chroot-plugin/chroot.c /usr/src/chroot-plugin/
COPY common/scripts/install_chroot_plugin.sh /opt/bin/
RUN chmod +x /opt/bin/install_chroot_plugin.sh && \
    /opt/bin/install_chroot_plugin.sh && \
    rm /opt/bin/install_chroot_plugin.sh

# Install slurm pyxis plugin
COPY common/scripts/install_pyxis_plugin.sh /opt/bin/
RUN chmod +x /opt/bin/install_pyxis_plugin.sh && \
    /opt/bin/install_pyxis_plugin.sh && \
    rm /opt/bin/install_pyxis_plugin.sh

# Install parallel because it's required for enroot operation
COPY common/scripts/install_parallel.sh /opt/bin/
RUN chmod +x /opt/bin/install_parallel.sh && \
    /opt/bin/install_parallel.sh && \
    rm /opt/bin/install_parallel.sh

# Install enroot
COPY common/scripts/install_enroot.sh /opt/bin/
RUN chmod +x /opt/bin/install_enroot.sh && \
    /opt/bin/install_enroot.sh && \
    rm /opt/bin/install_enroot.sh

# Copy enroot configuration
COPY common/enroot/enroot.conf /etc/enroot/
RUN chown 0:0 /etc/enroot/enroot.conf && chmod 644 /etc/enroot/enroot.conf

# Create node-local directories for enroot runtime data
RUN mkdir -p -m 777 /usr/share/enroot/enroot-data && \
    mkdir -p -m 755 /run/enroot

# Copy script for complementing jail filesystem in runtime
COPY common/scripts/complement_jail.sh /opt/bin/slurm/
RUN chmod +x /opt/bin/slurm/complement_jail.sh

# Update linker cache
RUN ldconfig

# Delete users & home because they will be linked from jail
RUN rm /etc/passwd* /etc/group* /etc/shadow* /etc/gshadow*
RUN rm -rf /home

# Delete SSH "message of the day" scripts because they will be linked from jail
RUN rm -rf /etc/update-motd.d

# Expose the port used for accessing sshd
EXPOSE 22

# Copy & run the entrypoint script
COPY login/sshd_entrypoint.sh /opt/bin/slurm/
RUN chmod +x /opt/bin/slurm/sshd_entrypoint.sh
ENTRYPOINT ["/opt/bin/slurm/sshd_entrypoint.sh"]
